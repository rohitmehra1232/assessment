/*
 * This file is generated by jOOQ.
 */
package com.assessment.assessment.database.tables.daos;


import com.assessment.assessment.database.tables.IqPatientDept;
import com.assessment.assessment.database.tables.records.IqPatientDeptRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IqPatientDeptDao extends DAOImpl<IqPatientDeptRecord, com.assessment.assessment.database.tables.pojos.IqPatientDept, Long> {

    /**
     * Create a new IqPatientDeptDao without any configuration
     */
    public IqPatientDeptDao() {
        super(IqPatientDept.IQ_PATIENT_DEPT, com.assessment.assessment.database.tables.pojos.IqPatientDept.class);
    }

    /**
     * Create a new IqPatientDeptDao with an attached configuration
     */
    public IqPatientDeptDao(Configuration configuration) {
        super(IqPatientDept.IQ_PATIENT_DEPT, com.assessment.assessment.database.tables.pojos.IqPatientDept.class, configuration);
    }

    @Override
    public Long getId(com.assessment.assessment.database.tables.pojos.IqPatientDept object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IqPatientDept.IQ_PATIENT_DEPT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchById(Long... values) {
        return fetch(IqPatientDept.IQ_PATIENT_DEPT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.assessment.assessment.database.tables.pojos.IqPatientDept fetchOneById(Long value) {
        return fetchOne(IqPatientDept.IQ_PATIENT_DEPT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchOptionalById(Long value) {
        return fetchOptional(IqPatientDept.IQ_PATIENT_DEPT.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(IqPatientDept.IQ_PATIENT_DEPT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchByName(String... values) {
        return fetch(IqPatientDept.IQ_PATIENT_DEPT.NAME, values);
    }

    /**
     * Fetch records that have <code>dob BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchRangeOfDob(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IqPatientDept.IQ_PATIENT_DEPT.DOB, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dob IN (values)</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchByDob(LocalDateTime... values) {
        return fetch(IqPatientDept.IQ_PATIENT_DEPT.DOB, values);
    }

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(IqPatientDept.IQ_PATIENT_DEPT.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchByAddress(String... values) {
        return fetch(IqPatientDept.IQ_PATIENT_DEPT.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>doctor_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchRangeOfDoctorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IqPatientDept.IQ_PATIENT_DEPT.DOCTOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>doctor_id IN (values)</code>
     */
    public List<com.assessment.assessment.database.tables.pojos.IqPatientDept> fetchByDoctorId(Long... values) {
        return fetch(IqPatientDept.IQ_PATIENT_DEPT.DOCTOR_ID, values);
    }
}
