/*
 * This file is generated by jOOQ.
 */
package com.assessment.assessment.database.tables;


import com.assessment.assessment.database.DefaultSchema;
import com.assessment.assessment.database.Keys;
import com.assessment.assessment.database.tables.records.IqSpecializationDoctorMappingRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IqSpecializationDoctorMapping extends TableImpl<IqSpecializationDoctorMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>iq_specialization_doctor_mapping</code>
     */
    public static final IqSpecializationDoctorMapping IQ_SPECIALIZATION_DOCTOR_MAPPING = new IqSpecializationDoctorMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IqSpecializationDoctorMappingRecord> getRecordType() {
        return IqSpecializationDoctorMappingRecord.class;
    }

    /**
     * The column <code>iq_specialization_doctor_mapping.id</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>iq_specialization_doctor_mapping.doctor_id</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, Long> DOCTOR_ID = createField(DSL.name("doctor_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>iq_specialization_doctor_mapping.specialization_id</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, Long> SPECIALIZATION_ID = createField(DSL.name("specialization_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>iq_specialization_doctor_mapping.iq_specializationcol</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, String> IQ_SPECIALIZATIONCOL = createField(DSL.name("iq_specializationcol"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>iq_specialization_doctor_mapping.created_by</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>iq_specialization_doctor_mapping.created_on</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>iq_specialization_doctor_mapping.updated_on</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>iq_specialization_doctor_mapping.updated_by</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, Long> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>iq_specialization_doctor_mapping.client_id</code>.
     */
    public final TableField<IqSpecializationDoctorMappingRecord, Integer> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.INTEGER, this, "");

    private IqSpecializationDoctorMapping(Name alias, Table<IqSpecializationDoctorMappingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private IqSpecializationDoctorMapping(Name alias, Table<IqSpecializationDoctorMappingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>iq_specialization_doctor_mapping</code> table
     * reference
     */
    public IqSpecializationDoctorMapping(String alias) {
        this(DSL.name(alias), IQ_SPECIALIZATION_DOCTOR_MAPPING);
    }

    /**
     * Create an aliased <code>iq_specialization_doctor_mapping</code> table
     * reference
     */
    public IqSpecializationDoctorMapping(Name alias) {
        this(alias, IQ_SPECIALIZATION_DOCTOR_MAPPING);
    }

    /**
     * Create a <code>iq_specialization_doctor_mapping</code> table reference
     */
    public IqSpecializationDoctorMapping() {
        this(DSL.name("iq_specialization_doctor_mapping"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<IqSpecializationDoctorMappingRecord, Long> getIdentity() {
        return (Identity<IqSpecializationDoctorMappingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<IqSpecializationDoctorMappingRecord> getPrimaryKey() {
        return Keys.KEY_IQ_SPECIALIZATION_DOCTOR_MAPPING_PRIMARY;
    }

    @Override
    public IqSpecializationDoctorMapping as(String alias) {
        return new IqSpecializationDoctorMapping(DSL.name(alias), this);
    }

    @Override
    public IqSpecializationDoctorMapping as(Name alias) {
        return new IqSpecializationDoctorMapping(alias, this);
    }

    @Override
    public IqSpecializationDoctorMapping as(Table<?> alias) {
        return new IqSpecializationDoctorMapping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IqSpecializationDoctorMapping rename(String name) {
        return new IqSpecializationDoctorMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IqSpecializationDoctorMapping rename(Name name) {
        return new IqSpecializationDoctorMapping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IqSpecializationDoctorMapping rename(Table<?> name) {
        return new IqSpecializationDoctorMapping(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IqSpecializationDoctorMapping where(Condition condition) {
        return new IqSpecializationDoctorMapping(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IqSpecializationDoctorMapping where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IqSpecializationDoctorMapping where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IqSpecializationDoctorMapping where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IqSpecializationDoctorMapping where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IqSpecializationDoctorMapping where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IqSpecializationDoctorMapping where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IqSpecializationDoctorMapping where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IqSpecializationDoctorMapping whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IqSpecializationDoctorMapping whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
